#! /bin/bash

# This script is used for building, testing and cleaning go repo.
# $1 - operation to do: build, test or clean
# $2 - additional arguments to operation

# add PATH variable for remote ssh commands 
export PATH=$PATH:/usr/local/go/bin

source ./b

if [[ $1 == "build" ]]; then

    cd $GOPATH/src
    go install $2 cmd/trex-emu.go

elif [[ $1 == "debug" ]]; then

    USER=vmarrazzo
    VERSION=`git rev-parse --verify HEAD`
    DATE=`date +%d.%m.%Y`
    TIME=`date +%H:%M`

    VERSION_FILE=$GOPATH/src/emu/core/version.go
    # cleanup previous status (if present)
    git checkout $VERSION_FILE
    sed -i "s/BuildVersion string = \"*.\"/BuildVersion string = \"${VERSION}\"/g" $VERSION_FILE
    sed -i "s/BuildDate    string = \"*.\"/BuildDate    string = \"${DATE}\"/g" $VERSION_FILE
    sed -i "s/BuildTime    string = \"*.\"/BuildTime    string = \"${TIME}\"/g" $VERSION_FILE
    sed -i "s/BuildBy      string = \"*.\"/BuildBy      string = \"${USER}\"/g" $VERSION_FILE

    GC_FLAGS='all=-N -l'

    cd $GOPATH/src
    BUILD_CMD="go install "$2" -gcflags=\"${GC_FLAGS}\" cmd/trex-emu.go"
    #function myecho { echo " \"'$@'\""; }
    #myecho "$BUILD_CMD"
    #exit 0
    eval "${BUILD_CMD}"
    # cleanup version file modification
    git checkout $VERSION_FILE

elif [[ $1 == "test" ]]; then

    cd $GOPATH/src
    go test $2 emu/core

    for p in emu/plugins/*; do
        if [[ $(find ./$p -type f -name *"_test.go") ]]; then
            go test $p
            RESULT=$?
            if [[ $RESULT != 0 ]]; then
                echo Test of "$p" failed!
                exit $RESULT
            fi
        fi
    done
    echo "Go tests passed :-)"

elif [[ $1 == "clean" ]]; then
    
    # clean only if repo built before
    if [[ -d "$GOPATH/pkg" ]]; then
        cd $GOPATH
        echo "Cleaning go cache files"
        go clean -modcache -cache $2
    fi
else
    echo "Unknown commad: $1, please provide one of: build, test or clean"
    exit 1
fi
